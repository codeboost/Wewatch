// Generated by IcedCoffeeScript 1.2.0i
(function() {
  var Skull, VideoView, connectToServer, extractVideoId, insertIframe, insertPlayer, saveVideoState, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    if ((_ref = window.module) != null) _ref.enter('app');
  }

  try {
    Skull = require('skull-client');
  } catch (e) {
    Skull = require('skull');
  }

  insertIframe = function() {
    var firstTag, tag;
    tag = document.createElement('script');
    tag.src = 'http://www.youtube.com/player_api';
    firstTag = document.getElementsByTagName('script')[0];
    return firstTag.parentNode.insertBefore(tag, firstTag);
  };

  extractVideoId = function(url) {
    var _ref2;
    return (_ref2 = url.match(/v=(.{11})/)) != null ? _ref2[1] : void 0;
  };

  WWM.Player = null;

  VideoView = (function(_super) {

    __extends(VideoView, _super);

    VideoView.name = 'VideoView';

    function VideoView() {
      this.seek = __bind(this.seek, this);

      this.changeUrl = __bind(this.changeUrl, this);

      this.pausedChanged = __bind(this.pausedChanged, this);
      return VideoView.__super__.constructor.apply(this, arguments);
    }

    VideoView.prototype.initialize = function() {
      this.model.bind('change:url', this.changeUrl);
      this.model.bind('change:position', this.seek);
      this.model.bind('change:paused', this.pausedChanged);
      return this.changeUrl();
    };

    VideoView.prototype.pausedChanged = function() {
      var isPaused;
      isPaused = this.model.get('paused');
      if (isPaused) {
        if (WWM.Player.getPlayerState() !== YT.PlayerState.PAUSED) {
          return WWM.Player.pauseVideo();
        }
      } else {
        if (WWM.Player.getPlayerState() !== YT.PlayerState.PLAYING) {
          return WWM.Player.playVideo();
        }
      }
    };

    VideoView.prototype.changeUrl = function() {
      var videoId;
      videoId = extractVideoId(this.model.get('url'));
      if (videoId) {
        WWM.Player.loadVideoById(videoId, this.model.get('position'));
        return $.getJSON('https://gdata.youtube.com/feeds/api/videos/' + videoId + '?v=2&alt=jsonc&callback=?', function(data, textStatus) {
          console.log('getJSON status: ', textStatus);
          console.log('getJSON data: ', data);
          return $('.view-count').text(data.data.viewCount + ' views');
        });
      }
    };

    VideoView.prototype.seek = function() {
      console.log('-> Seeking to ', this.model.get('position'));
      WWM.Player.seekTo(this.model.get('position'), true);
      return console.log('Current position: ', WWM.Player.getCurrentTime());
    };

    VideoView.prototype.loadVideo = function(videoId) {
      return WWM.Player.loadVideoById(videoId);
    };

    return VideoView;

  })(Backbone.View);

  connectToServer = function() {
    var sio;
    sio = io.connect();
    sio.on('connect', function() {
      console.log('Connected to server');
      return sio.emit('join', WWM.session.docid, function(err, data) {
        var PlaylistView, globalNS, playView, updateViewers, videoView;
        console.log('Joined session');
        WWM.connected = true;
        globalNS = Skull.createClient(sio.of(WWM.session._id));
        WWM.models = require('models').init(globalNS, data);
        videoView = new VideoView({
          model: WWM.models.video
        });
        updateViewers = function() {
          return $('.viewers').text(WWM.models['users'].length + ' viewers');
        };
        WWM.models['users'].bind('all', updateViewers);
        updateViewers();
        PlaylistView = require('playlist').View;
        playView = new PlaylistView({
          collection: WWM.models['playlist'],
          el: $('.playlist')
        });
        WWM.models['playlist'].bind('selected', function(model) {
          return WWM.models['video'].save(model.toJSON());
        });
        return playView.render();
      });
    });
    return $('.watch').click(function() {
      var url, videoId;
      url = $('[name=url]').val();
      videoId = extractVideoId(url);
      console.log('Setting new video URL: ', url);
      return WWM.Player.loadVideoById(videoId, 0);
    });
  };

  saveVideoState = function() {
    var url;
    console.log('Current getCurrentTime: ', WWM.Player.getCurrentTime());
    url = WWM.Player.getVideoUrl();
    return WWM.models['video'].save({
      paused: WWM.Player.getPlayerState() === YT.PlayerState.PAUSED,
      position: Math.round(WWM.Player.getCurrentTime()),
      url: url
    }, {
      silent: true
    });
  };

  insertPlayer = function() {
    var player, timerId;
    timerId = 0;
    $('#player').replaceWith('<div id="player"></div>');
    return player = new YT.Player('player', {
      height: 390,
      width: '100%',
      events: {
        'onReady': function(event) {
          console.log('Player ready');
          WWM.Player = event.target;
          return connectToServer();
        },
        'onStateChange': function(e) {
          if (!WWM.connected) return;
          console.log('State changed: ', e.data);
          if (WWM.models['video'].get('owner') === WWM.user._id) {
            if (e.data === YT.PlayerState.PLAYING) {
              clearTimeout(timerId);
              timerId = setTimeout(saveVideoState, 150);
              console.log('StateChanged getCurrentTime: ', Math.round(WWM.Player.getCurrentTime()));
            }
            if (e.data === YT.PlayerState.PAUSED) {
              clearTimeout(timerId);
              return timerId = setTimeout(saveVideoState, 150);
            }
          }
        }
      }
    });
  };

  window.onYouTubePlayerAPIReady = function() {
    console.log('Youtube player API ready!');
    return insertPlayer();
  };

  exports.start = function() {
    return $(function() {
      var Search, searchView;
      insertIframe();
      $('.change-video').click(function() {
        $('.url-form').toggleClass('hidden');
        return $('.url-form input').focus();
      });
      Search = require('search');
      searchView = Search.init($('.search-view'));
      return searchView.bind('selected', function(model) {
        return WWM.models['playlist'].create({
          thumbnail: model.get('thumbnail'),
          title: model.get('title'),
          url: 'http://www.youtube.com/watch?v=' + model.get('videoId'),
          uploader: model.get('uploader'),
          viewCount: model.get('viewCount'),
          position: 0,
          paused: false
        });
      });
    });
  };

  /*		
  		searchTimer = 0
  		$('.search-video').keyup ->
  			
  			txt = $.trim $('.search-video').val()
  			if txt.length > 3 
  				clearTimeout searchTimer
  				searchTimer = setTimeout performSearch, 250
  */


}).call(this);
